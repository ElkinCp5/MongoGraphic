class loadSchema{
    constructor(){
        this.Graphic   = require("../dependencies")();
        this.FileManager = this.Graphic.FileManager;
        this.Inflection  = this.Graphic.Inflection;
        this.PathRoot    = `${__dirname}/../src/schemas/`
        this.Schemas = [];
    }

    listsSchema(){
        this.FileManager.readdirSync(this.PathRoot).forEach((file) =>{
             
            var filePath = `${this.PathRoot + file}`;
        
            // Route validation
            (!this.FileManager.statSync(filePath).isFile() && !/.*.json/.test(file)) ? 
            filePath = undefined : null;
            
            // Creation of list of schemes generated by the system
            //var low_first   = this.Inflection.camelize(file.replace('.json', '').replace('-', '_'));
            var singularize = this.Inflection.singularize(file.replace('.json', '').replace('-', '_'));
            //var pluralize   = this.Inflection.pluralize(file.replace('.json', '').replace('-', '_'));
            
            // Object creation to root list
            const Model= {
                name: `${singularize}`,
                schema: require(filePath)
            };
            // Add object to root list
            this.Schemas.push(Model);
        });
        return this.Schemas;
    }

    singleSchema(file){
       
        var filePath = `${this.PathRoot + file}.json`;
        
        // Route validation
        (!this.FileManager.statSync(filePath).isFile() && !/.*.json/.test(file)) ? 
        filePath = undefined : null;          
        var singularize = this.Inflection.singularize(file.replace('.json', '').replace('-', '_'));
            
        // Object creation to root list
        const  Model= {
            name: `${singularize}`,
            schema: require(filePath)
        };
        return Model;
    }
    
    existsSchema(file){
        const Model = {}
        var filePath = `${this.PathRoot + file}.json`;
        
        if(this.FileManager.existsSync(filePath)) return true;
            else return false;
        
    }
}
module.exports = loadSchema;