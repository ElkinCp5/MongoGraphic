class loadSchema{
    constructor(){
        this.Graphic   = require("../dependencies")();
        this.FileManager = this.Graphic.FileManager;
        this.Inflection  = this.Graphic.Inflection;
        this.PathRoot    = `${__dirname}/../src/schemas/`
        this.Schemas = [];
    }

    listsSchema(){
        this.FileManager.readdirSync(this.PathRoot).forEach((file) =>{
            var filePath = `${this.PathRoot + file}`;
            // Route validation
            if(this.existsSchema(file)){ 
                (!this.FileManager.statSync(filePath).isFile() && !/.*.js/.test(file)) ? 
                filePath = undefined : null;
                // Creation of list of schemes generated by the system
                var singularize = this.Inflection.singularize(file.replace('.js', '').replace('-', '_'));
                // Object creation to root list
                const Model= { name: `${singularize}`, schema: require(filePath) };
                // Add object to root list
                this.Schemas.push(Model);
            }
        });
        return this.Schemas;
    }

    singleSchema(file){
        var filePath    = `${this.PathRoot + file}.js`;
        var singularize = '';
        var Model= {}; 
        // Route validation
        if(this.existsSchema(file)){ 
            if(!this.FileManager.statSync(filePath).isFile() && !/.*.js/.test(file)) 
                Model= false;
            else 
                // Object creation to root list
                singularize = this.Inflection.singularize(file.replace('.js', '').replace('-', '_'))
                Model= { name: `${singularize}`, schema: require(filePath)};
        }else {
            Model= false
        }
        return Model;
    }
    
    existsSchema(file){
        var filePath = `${this.PathRoot + file}.js`;
        if(this.FileManager.existsSync(filePath)) return true;
            else return false;
    }

}
module.exports = loadSchema;