class loadSchema{
    constructor(){
        this.Graphic   = require("../dependencies")();
        this.FileManager = this.Graphic.FileManager;
        this.Inflection  = this.Graphic.Inflection;
        this.Schemas = [];
    }

    singleSchema(){
        this.FileManager.readdirSync(`${__dirname}/../src/schemas`).forEach((file) =>{
            const Model = {}
            var filePath = `${__dirname}/../src/schemas/${file}`;
        
            // Route validation
            (!this.FileManager.statSync(filePath).isFile() && !/.*.json/.test(file)) ? 
            filePath = undefined : null;
            
            // Creation of list of schemes generated by the system
            var low_first   = this.Inflection.camelize(file.replace('.json', '').replace('-', '_'));
            var singularize = this.Inflection.singularize(file.replace('.json', '').replace('-', '_'));
            var pluralize   = this.Inflection.pluralize(file.replace('.json', '').replace('-', '_'));
            
            // Object creation to root list
            Model[singularize]= {
                verbatim: {
                    low_first,
                    singularize,
                    pluralize
                },
                schema: require(filePath)
            };
            // Add object to root list
            this.Schemas.push(Model);
        });
        return this.Schemas;
    }

    listsSchema(file){
        const Model = {}
        file = file+'.json'
        var filePath = `${__dirname}/../src/schemas/${file}`;
        
        // Route validation
        (!this.FileManager.statSync(filePath).isFile() && !/.*.json/.test(file)) ? 
        filePath = undefined : null;          
        var singularize = this.Inflection.singularize(file.replace('.json', '').replace('-', '_'));
            
        // Object creation to root list
        Model[singularize]= {
            schema: require(filePath)
        };


        return Model;
    }
}
module.exports = loadSchema;